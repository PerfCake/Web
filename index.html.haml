---
layout: default
---

%script{:type => "text/javascript", :src => "https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"}
%script{:type => "text/javascript", :src => "#{site.base_url}/javascripts/flipclock.min.js"}
%script{:type => "text/javascript", :src => "#{site.base_url}/javascripts/countdown.js"}

%header#overview.jumbotron.subhead
  .row
    .span7
      %span{:style => "float: left; margin: 0 15px 10px 0;"}
        %a.header{:href => "#{site.base_url}"}
          %img{:src => "#{site.base_url}/images/logo.mid.png"}/
      %h1 
        %a.header{:href => "#{site.base_url}"} PerfCake
      %p.lead A Lightweight Performance Testing Framework
    .span5
      .well{:style => "padding: 25px 25px 5px 25px; margin-bottom: 0px;"}
        %span{:id => "countdown"}
          %script{:type => "text/javascript"}
            var clock;
            $(document).ready(countdown());
.page-header
  %h1 This is PerfCake!
  %p 
    PerfCake is a lightweight performance testing tool and a load generator with the aim to be minimalistic, easy to use, provide stable results, have minimum influence on the measured system, be platform independent, use component design, allow high throughput. 
  %p
    Just give it a try and soon you'll be 
    %strong lovin' it!
    %a{:name => "about"}
.row
  .span6
    %h2 About
    %p
      PerfCake has a component design which means that you can build up your own tests from some basic building blocks. This allows a high flexibility in configuration and the components can be reused in different tests.
    %p 
      PerfCake has a pluggable architecture with many supported interfaces/protocols out of the box (HTTP, REST, JMS, JDBC, SOAP, socket, file etc.).
      If you need support for another interface ask
      %a{:href => "#{site.base_url}/community" } our community
      or provide the implementation. It is really easy!
    %p
      Except for interfaces/protocols, PerfCake also supports various means of generating the load. It can send a preset count of messages, it can send as many messages as the target system is able to consume for a given period of time, or it can carefully aim for maximum allowable throughput.
    %p
      What would be a measurement with proper reports?! PerfCake supports various means of reporting the measured values including average throughput (possibly over a time window), memory consumption of the target JVM with linear regression analysis to see if there is a memory leak and others. There are various output formats supported. Except for console or a log file, we support CSV that can be imported as a spreadsheet. In the future we plan to add more output formats as the requests arise.
    %p
      What if the target system crashed and just quickly returns error messages? There are validators that can validate the response to see if everything is OK. With validators you can also use PerfCake to write an end-to-end test of your system. Like in case of JDBC - when you provide a list of SQL commands and expected results.
    %p
      To run PerfCake, one just needs to supply a so called "scenario". This is an XML file that describes the building blocks that should be used together. Then you just run the scenario using Maven or a prepared shell script if you downloaded just the binaries.
      %em We understand the need for an IDE plugin and this is one of our short term goals.
      You can also use PerfCake in your application using its 
      = succeed "." do
        %a{:href => "#{site.base_url}/javadoc"} API
    %p
      We hope to make your performance testing a real 
      = succeed "." do
        %a{:href => "http://www.youtube.com/watch?v=DXf3U2z4IJs", :target => "_blank"} piece of cake
    %p
      Where to go next? Continue with one of the links below
      %i.icon-hand-down
  .span6
    %h2 Goals
    %p 
      Although you can use PerfCake now and be happy with it, we are aware of many areas where it can be better. So here are a few items from our priority list. If you want to work on any of theese, this would be highly appreciated. Just join 
      = succeed "." do
        %a{:href => "#{site.base_url}/community" } our community
    %ul
      %li Release 5.0
      %li 
        Redesign Generators
        = precede "(" do
          = succeed "," do
            %a{:href => "https://github.com/PerfCake/PerfCake/issues/186", :target => "_blank"} Introduce Generator interface
        = succeed ")" do
          %a{:href => "https://github.com/PerfCake/PerfCake/issues/188", :target => "_blank"} Custom function bounded generator
      %li Finish User and Developers Guides and make sure they are user friendly
      %li Improve PR on real world PerfCake usage
      %li
        Redesign IDE plugins for PerfCake
        = precede "(" do
          = succeed ")" do
            %a{:href => "https://github.com/PerfCake/PerfCake/issues/73", :target => "_blank"} Eclipse
            %a{:href => "https://github.com/PerfCake/PerfCake/issues/80", :target => "_blank"} IntelliJ IDEA
            %a{:href => "https://github.com/PerfCake/PerfCake/issues/144", :target => "_blank"} NetBeans
      %li Multiple PerfCake instances in a cluster should coordinate together (now they work as a separate units)
      %li
        Add the possibility to 
        %a{:href => "https://github.com/PerfCake/PerfCake/issues/196", :target => "_blank"} read responses from a different communication channel
      %li 
        Make sure PerfCake is the best tool on the market 
        %i.icon-smile
    %p
      From a long term perspective, we would like to see PerfCake being used as a standard performance measurement tool. We believe to achieve this through its minimalistic component design, stable results, and easy usage.
.row
  .span4
    %h2 Learn
    %ul
      %li
        %i.icon-time
        %a{:href => "#{site.base_url}/quickstart"} Quickstart Example 
      %li
        %a{:href => "#{site.base_url}/guide/user"} Users'
        and
        %a{:href => "#{site.base_url}/guide/devel"} Developers'
        guide
      %li
        %a{:href => "#{site.base_url}/javadoc"} JavaDoc
      %li
        %a{:href => "http://perfcake.blogspot.com", :alt => "Read the blog", :target => "_blank"} Read Success Stories on our Blog
  .span4
    %h2 Get Involved
    %ul
      %li 
        %a{:href => "#{site.base_url}/community"} Community
      %li 
        %a{:href => "https://github.com/PerfCake/PerfCake/issues", :target => "_blank"} Issue Tracker
      %li 
        %a{:href => "https://github.com/PerfCake/PerfCake", :target => "_blank"} Source Code
      %li 
        %a{:href => 'https://perfcake.ci.cloudbees.com/', :target => "_blank"} Continuous Integration
  .span4
    %h2 Stay Informed
    %ul
      %li 
        %a{:href => "https://twitter.com/search?q=PerfCakeTool", :alt => "Browse the PerfCakeTool on Twitter", :target => "_blank"} Watch us on Twitter
      %li
        %a{:href => "http://perfcake.blogspot.com", :alt => "Read the blog", :target => "_blank"} Read our Blog

