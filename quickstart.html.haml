---
layout: default
---
.row-fluid
  .page-header
    %h1 
      %i.icon-time
      Get Started
    %p.lead Get your performance benchmark running in 5 minutes.
.row
  .span4
    %h3 
      %i.icon-download-alt
      Download & Compile
    %p This is your first PerfCake example. You will learn to 1) get PerfCake and install it, 2) prepare your first simple scenario and run it, 3) evaluate results of your test. Let's start with the first step.
    %p
      %a.btn{ :href=>'#download' } View details &raquo; 
  .span4
    %h3 
      %i.icon-cogs
      Configure & Run
    %p Next, you can create your first scenario and run a performance test. Should you need an application to stress, you could temporarily use a free echo service. Without any deep knowledge of PerfCake, you will have a running example instantly.
    %p
      %a.btn{ :href=>'#configure' } View details &raquo; 
  .span4
    %h3
      %i.icon-ok 
      Validate & Evaluate Results
    %p The stress test is not much useful if you cannot see some numbers. So you will introduce a Reporter that reports to the Console Destination. At this moment, we do not provide any example of validating the responses as the validation is a technical preview in the first release.
    %p
      %a.btn{ :href=>'#evaluate' } View details &raquo; 

.row
  .span12
    %section#download
      %h2 
        %i.icon-download-alt
        Download and Compile
      %p
        The simplest way how to start with PerfCake is to 
        = succeed "." do
          %a{:href => "#{site.base_url}/download"}download the binary distribution
        You can unpack it wherever you want, just remember the directory (let’s call it 
        = succeed ")." do
          %tt $PERFCAKE_HOME
        After unpacking you will have your directory with the following structure:
      %pre
        $PERFCAKE_HOME
        ├── bin/
        │   ├── perfcake.bat
        │   └── perfcake.sh
        ├── lib/
        │   ├──ext/
        │   ├──plugins/
        │   └── *.jar
        ├── resources/
        │   ├── keystores/
        │   ├── messages/
        │   ├── scenarios/
        │   ├── schemas/
        │   └── xslt/
        ├── LICENSE.txt
        ├── log4j.xml
        └── README.md
      %p You may try to run PerfCake, you should receive output like this:
      %pre
        = preserve "$PERFCAKE_HOME/bin/perfcake.sh\n "
        = preserve "usage: ScenarioExecution -s &lt;SCENARIO&gt; [-sd &lt;SCENARIOS_DIR&gt;] [-md &lt;MESSAGES_DIR&gt;] [-pd &lt;PLUGINS_DIR&gt;] [-pf &lt;PROPERTIES_FILE&gt;] [-D&lt;property=value&gt;]*\n "
        = preserve "&nbsp;-D &lt;property=value&gt;                     system properties\n "
        = preserve "&nbsp;-md,--messages-dir &lt;MESSAGES_DIR&gt;       directory for messages\n "
        = preserve "&nbsp;-pd,--plugins-dir &lt;PLUGINS_DIR&gt;         directory for plugins\n "
        = preserve "&nbsp;-pf,--properties-file &lt;PROPERTIES_FILE&gt; custom system properties file\n "
        = preserve "&nbsp;-s,--scenario &lt;SCENARIO&gt;                scenario to be executed\n "
        = preserve "&nbsp;-sd,--scenarios-dir &lt;SCENARIOS_DIR&gt;     directory for scenarios"
      %p The script assumes you have JDK installed and available on the system path, minimal version 1.7 is required. Please note that the system being tested is not required to run on Java 7. It might not run on Java at all!
      %p 
        In the 
        %tt bin
        directory you can find executable scripts for running PerfCake on Linux, Windows and Mac.
      %p
        The 
        %tt lib
        directory contains application libraries. You do not have to take any care of these.
      %p
        What is more interesting is the 
        %tt resources
        directory. In its subdirectories you can find sample
        %em scenarios, messages
        and all versions of XSD schemas for scenario files.
        The 
        %tt keystores
        directory is used for specific message sender, but we will not deal with it in this quickstart.
      %p
        If you feel like going wild, you can
        %a{:href => "#{site.base_url}/download"}download the source distribution
        and compile it by
      %pre
        mvn clean package assembly:assembly
      %p
        Then you can find the binary distributions in the 
        %tt target
        directory and continue with this quickstart guide. You will also see the output of tests so you can be sure the project works fine on your system.

.row
  .span12
    %section#configure
      %h2 
        %i.icon-cogs
        Configure and Run
      %p
        In these days, your only possibility to prepare your first scenario is an XML file. You can use your favourite editor to create this file. The structure is defined by an XSD schema that can be found under
        %tt resources/schemas
        directory. Some of the editors are able to use the schema file to suggest you valid tags. Our future plans include providing GUI editor for Eclipse and InteliJ Idea that would allow you to create and edit scenarios, stay tuned! If you wanted to contribute, we are happy to
        = succeed "." do
          %a{ :href => "#{site.base_url}/community" } welcome you in our commmunity
      %p
        At minimum, simple scenario has to contain definitions for:
      %ul
        %li Generator - how the load will be generated
        %li Sender - where the load will be sent - interface or protocol with address, you can choose from many already implemeted
      %p
        Let’s assume you need to stress your web application that has some function exposed on the following URL:
        %tt http://your-app.com/cool-app
        , and you need to test how fast the function is. You want to generate maximum load for 10 seconds (10000 miliseconds) with 10 simultaneous clients (working threads).
      %p 
        If you do not have any such application at hand, you can consider using 
        %a{ :href => "http://httpbin.org/get", :target => '_blank' } httpbin.org
        but be polite and do not overload their server. It is provided for free.
      %p
        Now the important part comes. Create a file called 
        %tt http-echo.xml
        in the
        %tt $PERFCAKE_HOME/resources/scenarios
        directory.
        Now insert the following XML snippet in it:
      %pre
        = preserve "<span class=\"xml-tag\">&lt;?xml</span>&nbsp;<span class=\"xml-attr-name\">version</span>=<span class=\"xml-attr-value\">\"1.0\"</span>&nbsp;<span class=\"xml-attr-name\">encoding</span>=<span class=\"xml-attr-value\">\"utf-8\"</span><span class=\"xml-tag\">?&gt;</span>\n "
        = preserve "<span class=\"xml-tag\">&lt;scenario</span>&nbsp;<span class=\"xml-attr-name\">xmlns</span>=<span class=\"xml-attr-value\">\"urn:perfcake:scenario:3.0\"</span><span class=\"xml-tag\">&gt;</span>\n "
        = preserve "&nbsp;&nbsp;&nbsp;<span class=\"xml-tag\">&lt;generator</span>&nbsp;<span class=\"xml-attr-name\">class</span>=<span class=\"xml-attr-value\">\"DefaultMessageGenerator\"</span>&nbsp;<span class=\"xml-attr-name\">threads</span>=<span class=\"xml-attr-value\">\"${thread.count:10}\"</span><span class=\"xml-tag\">&gt;</span>\n "
        = preserve "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"xml-tag\">&lt;run</span>&nbsp;<span class=\"xml-attr-name\">type</span>=<span class=\"xml-attr-value\">\"time\"</span>&nbsp;<span class=\"xml-attr-name\">value</span>=<span class=\"xml-attr-value\">\"10000\"</span><span class=\"xml-tag\">/&gt;</span>\n "
        = preserve "&nbsp;&nbsp;&nbsp;<span class=\"xml-tag\">&lt;/generator&gt;</span>\n "
        = preserve "&nbsp;&nbsp;&nbsp;<span class=\"xml-tag\">&lt;sender</span>&nbsp;<span class=\"xml-attr-name\">class</span>=<span class=\"xml-attr-value\">\"HttpSender\"</span><span class=\"xml-tag\">&gt;</span>\n "
        = preserve "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"xml-tag\">&lt;property</span>&nbsp;<span class=\"xml-attr-name\">name</span>=<span class=\"xml-attr-value\">\"target\"</span>&nbsp;<span class=\"xml-attr-name\">value</span>=<span class=\"xml-attr-value\">\"http://your-app.com/cool-app\"</span><span class=\"xml-tag\">/&gt;</span>\n "
        = preserve "&nbsp;&nbsp;&nbsp;<span class=\"xml-tag\">&lt;/sender&gt;</span>\n "
        = preserve "<span class=\"xml-tag\">&lt;/scenario&gt;\n "
      %p
        This is just a simple example, you may use different sender or generator, or specify different properties. Everything is described in the 
        = succeed "." do
          %a{ :href => "#{site.base_url}/guide/user" } User Guide
      %p
        You can see 
        %tt 
          = preserve "${thread.count:10}"
        in the generator’s definition. That is a system property
        %tt
          = preserve "thread.count"
        that you may set and the actual value of the property will be used. If the property is not set, the default value (10) will be used.
      %p
        Now, all you need to do is to execute your new test scenario by running the following command:
      %pre
        $PERFCAKE_HOME/bin/perfcake.sh -s http-echo
      %p
        Please note you do not need to specify the XML extension. We are working on a fix for you not to have to specify the default scenario location as well.
      %p
        Now you are running your fisrt stress test. Even if you cannot see what is going on, PerfCake sends requests to your application in many threads. The test should run aproximately for 10 seconds. If you want to see some numbers (e.g. how fast your system is), you have to add one more element to your scenario to evaluate the results - the reporting.

.row
  .span12
    %section#evaluate
      %h2 
        %i.icon-ok
        Validate and Evaluate Results
      %p
        For reporting some results of your measurement, you have to configure a Reporter - an object that is capable of computing results in some way and outputing them wherever you can imagine.
      %p
        Copy your
        %tt http-echo.xml
        file to 
        %tt http-reporting.xml
        and have it look like the listing below:
      %pre
        = preserve "<span class=\"xml-tag\">&lt;?xml</span>&nbsp;<span class=\"xml-attr-name\">version</span>=<span class=\"xml-attr-value\">\"1.0\"</span>&nbsp;<span class=\"xml-attr-name\">encoding</span>=<span class=\"xml-attr-value\">\"utf-8\"</span><span class=\"xml-tag\">?&gt;</span>\n "
        = preserve "<span class=\"xml-tag\">&lt;scenario</span>&nbsp;<span class=\"xml-attr-name\">xmlns</span>=<span class=\"xml-attr-value\">\"urn:perfcake:scenario:3.0\"</span><span class=\"xml-tag\">&gt;</span>\n "
        = preserve "&nbsp;&nbsp;&nbsp;<span class=\"xml-tag\">&lt;generator</span>&nbsp;<span class=\"xml-attr-name\">class</span>=<span class=\"xml-attr-value\">\"DefaultMessageGenerator\"</span>&nbsp;<span class=\"xml-attr-name\">threads</span>=<span class=\"xml-attr-value\">\"${thread.count:10}\"</span><span class=\"xml-tag\">&gt;</span>\n "
        = preserve "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"xml-tag\">&lt;run</span>&nbsp;<span class=\"xml-attr-name\">type</span>=<span class=\"xml-attr-value\">\"time\"</span>&nbsp;<span class=\"xml-attr-name\">value</span>=<span class=\"xml-attr-value\">\"10000\"</span><span class=\"xml-tag\">/&gt;</span>\n "
        = preserve "&nbsp;&nbsp;&nbsp;<span class=\"xml-tag\">&lt;/generator</span><span class=\"xml-tag\">&gt;</span>\n "
        = preserve "&nbsp;&nbsp;&nbsp;<span class=\"xml-tag\">&lt;sender</span>&nbsp;<span class=\"xml-attr-name\">class</span>=<span class=\"xml-attr-value\">\"HttpSender\"</span><span class=\"xml-tag\">&gt;</span>\n "
        = preserve "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"xml-tag\">&lt;property</span>&nbsp;<span class=\"xml-attr-name\">name</span>=<span class=\"xml-attr-value\">\"target\"</span>&nbsp;<span class=\"xml-attr-name\">value</span>=<span class=\"xml-attr-value\">\"http://your-app.com/cool-app\"</span><span class=\"xml-tag\">/&gt;</span>\n "
        = preserve "&nbsp;&nbsp;&nbsp;<span class=\"xml-tag\">&lt;/sender&gt;</span>\n "
        = preserve "&nbsp;&nbsp;&nbsp;<span class=\"xml-tag\">&lt;reporting&gt;</span>\n "
        = preserve "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"xml-tag\">&lt;reporter</span>&nbsp;<span class=\"xml-attr-name\">class</span>=<span class=\"xml-attr-value\">\"ResponseTimeStatsReporter\"</span><span class=\"xml-tag\">&gt;</span>\n "
        = preserve "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"xml-tag\">&lt;destination</span>&nbsp;<span class=\"xml-attr-name\">class</span>=<span class=\"xml-attr-value\">\"ConsoleDestination\"</span><span class=\"xml-tag\">&gt;</span>\n "
        = preserve "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"xml-tag\">&lt;period</span>&nbsp;<span class=\"xml-attr-name\">type</span>=<span class=\"xml-attr-value\">\"time\"</span>&nbsp;<span class=\"xml-attr-name\">value</span>=<span class=\"xml-attr-value\">\"2000\"</span><span class=\"xml-tag\">/&gt;</span>\n "
        = preserve "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"xml-tag\">&lt;/destination&gt;</span>\n "
        = preserve "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"xml-tag\">&lt;/reporter&gt;</span>\n "
        = preserve "&nbsp;&nbsp;&nbsp;<span class=\"xml-tag\">&lt;/reporting&gt;</span>\n "
        = preserve "<span class=\"xml-tag\">&lt;/scenario&gt;</span>\n "
      %p
        Adding the
        %tt reporting 
        section you let your scenario to log results to some destination - in our case to the PerfCake’s console. Output will be provided every 2 seconds (2000 miliseconds).
      %p
        Try to run the scenario again by the following command:
      %pre
        $PERFCAKE_HOME/bin/perfcake.sh -s http-reporting
      %p
        You should see results very similar to the listing below, numbers will be different depending on the performance of your application:
      %pre
        = preserve "2014-09-22 16:02:29,722 INFO  [ScenarioExecution] === Welcome to PerfCake 3.0 ===\n "
        = preserve "2014-09-22 16:02:29,745 INFO  [DefaultMessageGenerator] Starting to generate...\n "
        = preserve "[0:00:02][101 iterations][20%] [153.601524] [Maximum => 493.399422] [Minimum => 137.903448] [Average => 178.72558479347822] [warmUp => false]\n "
        = preserve "[0:00:04][223 iterations][40%] [138.697935] [Maximum => 493.399422] [Minimum => 136.856122] [Average => 165.1969354583334] [warmUp => false]\n "
        = preserve "[0:00:06][356 iterations][60%] [561.241] [Maximum => 561.241] [Minimum => 136.802823] [Average => 161.6568149140401] [warmUp => false]\n "
        = preserve "[0:00:08][488 iterations][80%] [141.950565] [Maximum => 561.241] [Minimum => 136.296136] [Average => 159.46751243035334] [warmUp => false]\n "
        = preserve "2014-09-22 16:02:39,751 INFO  [DefaultMessageGenerator] Reached test end.\n "
        = preserve "2014-09-22 16:02:39,751 INFO  [ReportManager] Reporting final results:\n "
        = preserve "[0:00:10][621 iterations][100%] [151.259983] [Maximum => 561.241] [Minimum => 136.18406] [Average => 157.46288856933108] [warmUp => false]\n "
        = preserve "2014-09-22 16:02:39,752 INFO  [DefaultMessageGenerator] Shutting down execution...\n "
        = preserve "2014-09-22 16:02:39,884 INFO  [ScenarioExecution] === Goodbye! ===\n "
      %p
        The 
        %tt warmUp 
        attribute you can see in the results determines the mode of the test. In our example we do not wait for the server to warm up so the attribute is set to false all the time.
      %h3 
        Bonus task
      %p
        There is a very simple way how to measure performance of your application under different conditions with the scenario you have just created. You can test the scalability of your application using the 
        %tt thread.count
        attribute.
      %p
        Just run your scenario with this property set to different values:
      %pre
        = preserve "$PERFCAKE_HOME/bin/perfcake.sh -s http-reporting -Dthread.count=1\n "
        = preserve "$PERFCAKE_HOME/bin/perfcake.sh -s http-reporting -Dthread.count=10\n "
        = preserve "$PERFCAKE_HOME/bin/perfcake.sh -s http-reporting -Dthread.count=100\n "
      %p
        After a half minute you should see different numbers for each run (if your application scales). Naturally, results of your meassurement won't be precise because of different conditions for each of your runs, for exact results, you will have to ensure same initial conditions for each run (i.e. restart the server, ensure some warm up period). For these advanced practices please refer to the
        = succeed "." do
          %a{ :href=>"#{site.base_url}/guide/user" } User Guide
